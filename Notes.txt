Créer un dossier Projet final
Créer deux sous-dossiers "back-end" et "front-end"
Initialiser le projet avec npm init -y
Ouvrir le projet avec la commande code .
Installer tout les packages qu'on aura besoin : npm i express mongoose dotenv bcrypt jsonwebtoken cors
Installer "nodemon" avec npm i -D nodemon
---------------------------------------------------------------------------------------------------
Le codage:

On commence par initiliser le serveur express et donner le port sur lequel le serveur va tourner, puis on run avec la commande: npm run dev

Quand on utilise un fichier env, il faut l'importer avec la ligne: require("dotenv").config();

après on peut créer le model ou les models qu'on veut ( vaut mieux les mettre dans un dossier models)

Puis on commence à créer les api (vaut mieux aussi les mettre dans un dossier api)

---------------------------------------------------------------------------------------------------
Front-end:

On ouvre le terminal et on accède au dossier front-end puis on tape la commande:
npx create-react-app . 

Pour utiliser le routage, on doit installer le router-dom avec la commande suivante:
npm i react-router-dom

Pour démarrer un projet back-end (NodeJS) : npm run dev
Pour démarrer un projet front-end (React) : npm start

Pour ne pas à chaque fois écrire le lien de l'api "http..." on peut utiliser le package "proxy" sur le fichier package.json. Comme ça, une fois que le site soit hébergé, on supprime que ce package au lieu de supprimer le localhost sur tout les liens API que j'ai sur le code.
Ps: Quand on modifie le fichier package.json, on doit arrêter le serveur et le redémarrer

pour savoir ce qui était enregistré sur le navigateur, on tape sur la console du navigateur local Storage, et on aura tout les données. 
Si on veut accéder à une donnée précise, on mets localStorage.getItem("nomDonnée"). On peut aussi rajouter des données avec : localStorage.setItem("Nom","Ilham).
Si on veut supprimer une donnée, on écrit: localStorage.removeItem("Nom");





// https://res.cloudinary.com/devatchannel/image/upload/v1598287295/ecommerce/ziieugqrhzh05isbjpdl.jpg
// https://res.cloudinary.com/dalsfuwdq/image/upload/v1592052015/samples/people/boy-snow-hoodie.jpg
// https://res.cloudinary.com/devatchannel/image/upload/v1598287349/ecommerce/jem9lo7aze10yxjermku.jpg
// https://res.cloudinary.com/dalsfuwdq/image/upload/v1592052013/samples/people/smiling-man.jpg
// https://res.cloudinary.com/dalsfuwdq/image/upload/v1592052011/samples/ecommerce/analog-classic.jpg


var str = "242Welcome23 45to344 254324WayToLearnX!";
  var patt = /\D */g;
  var result = str.match(patt);
  
  console.log(result.join(""));

\D est utilisé pour trouver le caractère non numérique. g effectuer une correspondance globale.

c.charCodeAt(0); // renvoi la valeur ASCII d'un caractère

eval(f) > 1 // eval() est une fonction globale en JavaScript qui évalue une chaîne spécifiée en tant que code JavaScript et l’exécute.





